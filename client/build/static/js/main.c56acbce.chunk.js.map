{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","handleChange","target","name","value","submit","event","preventDefault","payload","url","method","resetUserInputs","displayBlogPost","length","map","post","index","key","className","this","classname","onSubmit","type","placeholder","onChange","cols","rows","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2RAiHeA,G,kNA5GbC,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,MAAO,I,EAGTC,kBAAoB,WAClB,EAAKC,e,EAGPA,YAAc,WACZC,IACGC,IAAI,QACJC,MAAK,SAACC,GACL,IAAMC,EAAOD,EAASC,KACtB,EAAKC,SAAS,CAAER,MAAOO,IACvBE,QAAQC,IAAI,oBAEbC,OAAM,WACLC,MAAM,6B,EAIZC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACRC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,MAEd,EAAKR,SAAL,eACGO,EAAOC,K,EAIZC,OAAS,SAACC,GACRA,EAAMC,iBACN,IAAMC,EAAU,CACdtB,MAAO,EAAKD,MAAMC,MAClBC,KAAM,EAAKF,MAAME,MAGnBI,IAAM,CACJkB,IAAK,YACLC,OAAQ,OACRf,KAAMa,IAELf,MAAK,WACJI,QAAQC,IAAI,uBACZ,EAAKa,kBACL,EAAKrB,iBAENS,OAAM,WACLF,QAAQC,IAAI,6B,EAIlBa,gBAAkB,WAChB,EAAKf,SAAS,CACZV,MAAO,GACPC,KAAM,M,EAIVyB,gBAAkB,SAACxB,GACjB,OAAKA,EAAMyB,OAEJzB,EAAM0B,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,EAAOE,UAAU,qBACzB,4BAAKH,EAAK7B,OACV,2BAAI6B,EAAK5B,UALa,M,uDAc1B,OAHAU,QAAQC,IAAI,UAAWqB,KAAKlC,OAI1B,yBAAKiC,UAAU,OACb,wBAAIA,UAAU,SAAd,yBACA,yBAAKE,UAAU,SAASD,KAAKP,gBAAgBO,KAAKlC,MAAMG,QAExD,0BAAMiC,SAAUF,KAAKd,QACnB,yBAAKa,UAAU,cACb,2BACEI,KAAK,OACLnB,KAAK,QACLoB,YAAY,cACZnB,MAAOe,KAAKlC,MAAMC,MAClBsC,SAAUL,KAAKlB,gBAGnB,yBAAKiB,UAAU,cACb,8BACEf,KAAK,OACLoB,YAAY,YACZE,KAAK,KACLC,KAAK,KACLtB,MAAOe,KAAKlC,MAAME,KAClBqC,SAAUL,KAAKlB,gBAInB,gD,GAtGQ0B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.c56acbce.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    title: \"\",\n    body: \"\",\n    posts: [],\n  };\n\n  componentDidMount = () => {\n    this.getBlogPost();\n  };\n\n  getBlogPost = () => {\n    axios\n      .get(\"/api\")\n      .then((response) => {\n        const data = response.data;\n        this.setState({ posts: data });\n        console.log(\"data received\");\n      })\n      .catch(() => {\n        alert(\"error retreiving data\");\n      });\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n    const payload = {\n      title: this.state.title,\n      body: this.state.body,\n    };\n\n    axios({\n      url: \"/api/save\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then(() => {\n        console.log(\"data sent to server\");\n        this.resetUserInputs();\n        this.getBlogPost();\n      })\n      .catch(() => {\n        console.log(\"internal server error\");\n      });\n  };\n\n  resetUserInputs = () => {\n    this.setState({\n      title: \"\",\n      body: \"\",\n    });\n  };\n\n  displayBlogPost = (posts) => {\n    if (!posts.length) return null;\n\n    return posts.map((post, index) => (\n      <div key={index} className=\"blog-post-display\">\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ));\n  };\n\n  render() {\n    console.log(\"State: \", this.state);\n\n    //jsx\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">Welcome to the Forum.</h2>\n        <div classname=\"blog-\">{this.displayBlogPost(this.state.posts)}</div>\n\n        <form onSubmit={this.submit}>\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"Enter title\"\n              value={this.state.title}\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <textarea\n              name=\"body\"\n              placeholder=\"text body\"\n              cols=\"30\"\n              rows=\"10\"\n              value={this.state.body}\n              onChange={this.handleChange}\n            ></textarea>\n          </div>\n\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}