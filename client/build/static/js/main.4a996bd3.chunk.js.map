{"version":3,"sources":["components/PageTitle.js","components/Login.js","pages/LoginPage.js","pages/ForumPage.js","App.js","serviceWorker.js","index.js"],"names":["PageTitle","id","Login","props","useState","message","setMessage","doLogin","event","a","preventDefault","user","firstName","localStorage","setItem","JSON","stringify","window","location","href","alert","toString","onSubmit","type","placeholder","ref","c","class","value","onClick","LoginPage","tempuser","getItem","username","parse","ForumPage","state","body","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","handleChange","target","name","submit","payload","url","method","resetUserInputs","displayBlogPost","length","map","post","index","key","className","doLogout","this","classname","cols","rows","onChange","React","Component","App","path","exact","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.4a996bd3.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction PageTitle() {\n  return <h1 id=\"title\">MyGymPro</h1>;\n}\n\nexport default PageTitle;\n","import React, { useState } from \"react\";\n\nfunction Login(props) {\n  var loginName;\n  var loginPassword;\n\n  const [message, setMessage] = useState(\"\");\n\n  const doLogin = async (event) => {\n    event.preventDefault();\n\n    // var js =\n    //   '{\"login\":\"' +\n    //   loginName.value +\n    //   '\",\"password\":\"' +\n    //   loginPassword.value +\n    //   '\"}';\n\n    try {\n      // const response = await fetch(\"http://localhost:8080/api/login\", {\n      //   method: \"POST\",\n      //   body: js,\n      //   headers: { \"Content-Type\": \"application/json\" },\n      //});\n\n      // var res = JSON.parse(await response.text());\n\n      // if (res.id <= 0) {\n      if (false) {\n        setMessage(\"User/Password combination incorrect\");\n      } else {\n        var user = {\n          firstName: \"Austin\", //res.firstName,\n          // lastName: res.lastName,\n          // id: res.id,\n        };\n        localStorage.setItem(\"user_data\", JSON.stringify(user));\n\n        setMessage(\"\");\n        window.location.href = \"/access\";\n      }\n    } catch (e) {\n      alert(e.toString());\n      return;\n    }\n  };\n\n  return (\n    <div id=\"loginDiv\">\n      <form onSubmit={doLogin}>\n        <span id=\"inner-title\">PLEASE LOG IN</span>\n        <input\n          type=\"text\"\n          id=\"loginName\"\n          placeholder=\"Username\"\n          ref={(c) => (loginName = c)}\n        />\n        <br />\n        <input\n          type=\"password\"\n          id=\"loginPassword\"\n          placeholder=\"Password\"\n          ref={(c) => (loginPassword = c)}\n        />\n        <br />\n        <input\n          type=\"submit\"\n          id=\"loginButton\"\n          class=\"buttons\"\n          value=\"Do It\"\n          onClick={doLogin}\n        />\n      </form>\n      <span id=\"loginResult\">{message}</span>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\n\nimport PageTitle from '../components/PageTitle';\nimport Login from '../components/Login';\n\nconst LoginPage = (props) =>\n{\n\n    return(\n        <div>\n            <PageTitle />\n            <Login />\n        </div>\n    );\n};\n\nexport default LoginPage;\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./forum.css\";\nimport Linkify from \"react-linkify\";\n\nvar tempuser = window.localStorage.getItem(\"user_data\");\nif (tempuser) {\n  var userdata = JSON.parse(tempuser);\n  var username = userdata.firstName;\n} else var username = \"\";\n\nclass ForumPage extends React.Component {\n  state = {\n    //title: \"\",\n    body: \"\",\n    posts: [],\n  };\n\n  componentDidMount = () => {\n    this.getBlogPost();\n  };\n\n  getBlogPost = () => {\n    axios\n      .get(\"/api\")\n      .then((response) => {\n        const data = response.data;\n        this.setState({ posts: data });\n        console.log(\"data received\");\n      })\n      .catch(() => {\n        alert(\"error retreiving data\");\n      });\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n    const payload = {\n      user: username,\n      // title: this.state.title,\n      body: this.state.body,\n    };\n\n    axios({\n      url: \"/api/save\",\n      method: \"POST\",\n      data: payload,\n    })\n      .then(() => {\n        console.log(\"data sent to server\");\n        this.resetUserInputs();\n        this.getBlogPost();\n      })\n      .catch(() => {\n        console.log(\"internal server error\");\n      });\n  };\n\n  resetUserInputs = () => {\n    this.setState({\n      // title: \"\",\n      body: \"\",\n    });\n  };\n\n  displayBlogPost = (posts) => {\n    if (!posts.length) return null;\n\n    return posts.map((post, index) => (\n      <div key={index} className=\"blog-post-display\">\n        <h3>{post.user}:</h3>\n        <Linkify>\n          <p>{post.body}</p>\n        </Linkify>\n      </div>\n    ));\n  };\n\n  doLogout = (event) => {\n    event.preventDefault();\n    window.location.href = \"/\";\n  };\n\n  render() {\n    console.log(\"State: \", this.state);\n\n    //jsx\n    return (\n      <div className=\"app\">\n        <h2 className=\"title\">Welcome to the Forum.</h2>\n        <div classname=\"blog-\">{this.displayBlogPost(this.state.posts)}</div>\n        <div className=\"user\">\n          <div className=\"signedinas\">Signed in as: </div>\n          <div className=\"profile\">{username}</div>\n        </div>\n        <form onSubmit={this.submit}>\n          {/* <div className=\"form-input\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              placeholder=\"title\"\n              value={this.state.title}\n              onChange={this.handleChange}\n            />\n          </div> */}\n          <div className=\"form-input\">\n            <textarea\n              name=\"body\"\n              placeholder=\"Say something interesting\"\n              cols=\"30\"\n              rows=\"10\"\n              value={this.state.body}\n              onChange={this.handleChange}\n            ></textarea>\n          </div>\n\n          <button className=\"submit\">Post</button>\n        </form>\n        <button className=\"logout\" onClick={this.doLogout}>\n          Logout\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ForumPage;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nimport LoginPage from \"./pages/LoginPage\";\nimport ForumPage from \"./pages/ForumPage\";\n\nimport \"./App.css\";\nimport \"./styles.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <LoginPage />\n        </Route>\n        <Route path=\"/access\" exact>\n          <ForumPage />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}